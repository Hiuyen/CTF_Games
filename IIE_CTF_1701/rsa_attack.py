#! /usr/bin/env python
# -*- coding: utf-8 -*-

from hashlib import sha512
from Crypto.PublicKey.RSA import long_to_bytes
from Crypto.Util.number import getPrime, bytes_to_long, getRandomInteger
from libnum import invmod, gcd
import random


def MyExit(n):
	print "--------------Game Over!--------------"
	exit(n)

def CalBit(num):
	num = int(num)
	l = len(bin(num))
	return l-2

def PiB(x):
	bt = 535133434815713529396336532563347355517618408596165523830731120202997130600422831050392069422484185177545318512057051880367718817602258056800336894798144934272411868445605391589713084937777338921716972334696240919698852942405742563151622108491101492553423089677095567513561590975046911060733951890270488334966292485848088975194665439987355086478171077456987849958647884103862362183547695577871837481285562928896842249092862434391406115638301969930383838395368009963131422308632154174777076718983107212863848027077366613568995879235444989600905288370574794506595677400144859352447568666938453784217198264022869734848557873457897837473312432267927221179700478943117552475746750090090670289994396731490506138423635736528646658283006702106961359542816564950815606468929768866814332747466441055230586238688715197577174261626771321180100406263072049641134436739652016368524405366462262546181567214160003621905154906004170131363706542521597693717964554549351528504920193045821711575208992298608701870748947189871009493791514370876900130657300837613583430174063957214006595416438602128122144333574760296885967367583458489129210436528714862528756487956369506542016954876212109892093191016140205333439186576797008899830863678683202457177530527
	return invmod(x, bt)

def GetED(p, q):
	k = CalBit(q*p)
	phi_n = (p-1)*(q-1)
	r = random.randint(10, 99)
	while True:
		u = getPrime(k/4 - r)
		if gcd(u, phi_n) != 1:
			continue
		t = invmod(u, phi_n)
		e = PiB(t)
		if gcd(e, phi_n) == 1:
			break
	d = invmod(e, phi_n)
	return (e, d)

def verify():
	print "Proof of Work"
	prefix = long_to_bytes(getRandomInteger(32))
	print "Prefix: %s" %prefix.encode('base64')
	try:
		suffix = raw_input()
		s = suffix.decode('base64')
	except:
		MyExit(-1)
	r = sha512(prefix + s).hexdigest()
	if "ffffff" not in r:
		MyExit(-1)

def main():
	verify()
	print "Welcome to a RSA Decryption System, calculating args, plz wait..."
		
	p=getPrime(2048)
	q=getPrime(2048)
	n = p * q
	e, d = GetED(p, q)
	print "n: ", hex(n)
	print "e: ", hex(e)
	flag = "flag{XXXXXXXXXXXXXXXXXXXXX}"
	flag = bytes_to_long(flag)
	enc_flag = pow(flag, e, n)
	print "flag is: ", hex(enc_flag)
	

if __name__ == '__main__':
	main()
